// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 17.0.0 Build 595 04/25/2017 SJ Lite Edition"

// DATE "10/17/2017 17:07:43"

// 
// Device: Altera EP4CE115F29C7 Package FBGA780
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module exercise3 (
	SW,
	LEDG);
input 	[3:0] SW;
output 	[7:7] LEDG;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \LEDG[7]~output_o ;
wire \SW[0]~input_o ;
wire \SW[1]~input_o ;
wire \SW[2]~input_o ;
wire \SW[3]~input_o ;
wire \WideXor0~0_combout ;


cycloneive_io_obuf \LEDG[7]~output (
	.i(\WideXor0~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\LEDG[7]~output_o ),
	.obar());
// synopsys translate_off
defparam \LEDG[7]~output .bus_hold = "false";
defparam \LEDG[7]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_ibuf \SW[0]~input (
	.i(SW[0]),
	.ibar(gnd),
	.o(\SW[0]~input_o ));
// synopsys translate_off
defparam \SW[0]~input .bus_hold = "false";
defparam \SW[0]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \SW[1]~input (
	.i(SW[1]),
	.ibar(gnd),
	.o(\SW[1]~input_o ));
// synopsys translate_off
defparam \SW[1]~input .bus_hold = "false";
defparam \SW[1]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \SW[2]~input (
	.i(SW[2]),
	.ibar(gnd),
	.o(\SW[2]~input_o ));
// synopsys translate_off
defparam \SW[2]~input .bus_hold = "false";
defparam \SW[2]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \SW[3]~input (
	.i(SW[3]),
	.ibar(gnd),
	.o(\SW[3]~input_o ));
// synopsys translate_off
defparam \SW[3]~input .bus_hold = "false";
defparam \SW[3]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \WideXor0~0 (
// Equation(s):
// \WideXor0~0_combout  = \SW[0]~input_o  $ (\SW[1]~input_o  $ (\SW[2]~input_o  $ (\SW[3]~input_o )))

	.dataa(\SW[0]~input_o ),
	.datab(\SW[1]~input_o ),
	.datac(\SW[2]~input_o ),
	.datad(\SW[3]~input_o ),
	.cin(gnd),
	.combout(\WideXor0~0_combout ),
	.cout());
// synopsys translate_off
defparam \WideXor0~0 .lut_mask = 16'h6996;
defparam \WideXor0~0 .sum_lutc_input = "datac";
// synopsys translate_on

assign LEDG[7] = \LEDG[7]~output_o ;

endmodule
