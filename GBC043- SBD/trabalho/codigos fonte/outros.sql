
SET SEARCH_PATH TO ROCKINRIO;
SET datestyle to 'dmy';



----------------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION atualiza_departamento()
RETURNS VOID AS $$
DECLARE AUX RECORD;
DECLARE AUX2 INT;
BEGIN
	FOR AUX IN SELECT * FROM DEPARTAMENTO
	LOOP
		AUX2 := 0;
		SELECT COUNT(*)
		INTO AUX2
		FROM TRABALHA T
		WHERE T.NUMERO = AUX.NUM_DEPART;
		
		UPDATE DEPARTAMENTO
		SET nr_funcionarios = AUX2
		WHERE DEPARTAMENTO.NUM_DEPART = AUX.NUM_DEPART;
	END LOOP;
END $$ LANGUAGE 'plpgsql';


SELECT atualiza_departamento();



CREATE OR REPLACE VIEW showzim (NOME,HITS,HORARIO,DIA,PALCO)
AS 	SELECT B.NOME, B.DESCRICAO_SHOW, S.HORARIO, S.SIGLA, A.NOME
	FROM BANDA B, SHOWS S, ATRACAO A
	WHERE B.NOME = S.NOME AND A.COD_INTERNO = B.COD_INTERNO	
	ORDER BY SIGLA ASC;







CREATE OR REPLACE FUNCTION add_departamento()
RETURNS TRIGGER AS $$

BEGIN

	IF(TG_OP = 'DELETE') THEN
		UPDATE DEPARTAMENTO SET NR_FUNCIONARIOS = NR_FUNCIONARIOS - 1 WHERE NUM_DEPART = OLD.NUMERO;
		RETURN OLD;

	ELSIF (TG_OP = 'INSERT') THEN
		UPDATE DEPARTAMENTO SET NR_FUNCIONARIOS = NR_FUNCIONARIOS + 1 WHERE NUM_DEPART = NEW.NUMERO;
		RETURN NEW;
	 END IF;
END $$ LANGUAGE 'plpgsql';


CREATE TRIGGER departamento_add
AFTER INSERT OR DELETE ON TRABALHA
FOR EACH ROW EXECUTE PROCEDURE add_departamento();


CREATE OR REPLACE FUNCTION adiciona_funcionario(IN CPF VARCHAR(15), IN RG VARCHAR(12),IN NOME VARCHAR(50),
IN NASC DATE, IN ENDE VARCHAR(100),IN TEL VARCHAR(15),IN SAL FLOAT ,IN DEP INTEGER,
IN FUNCAO VARCHAR(40))
RETURNS VOID AS $$
BEGIN


	INSERT INTO FUNCIONARIO VALUES (CPF,RG,NOME,NASC,ENDE,TEL);

	INSERT INTO TRABALHA VALUES (DEP,CPF,FUNCAO,SAL);

END $$ LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION verifica_salario()
RETURNS TRIGGER AS $$
DECLARE AUX FLOAT;
BEGIN

	SELECT SUM(T.SALARIO)
	INTO AUX	
	FROM DEPARTAMENTO D,TRABALHA T
	WHERE  D.NUM_DEPART = T.NUMERO AND D.NUM_DEPART = NEW.NUMERO;

	AUX := AUX + NEW.SALARIO;

	IF (AUX > (SELECT ORCAMENTO FROM DEPARTAMENTO D WHERE D.NUM_DEPART = NEW.NUMERO)) THEN
		 RAISE NOTICE 'FORA DO ORCAMENTO' ;
		 RETURN NULL;
	ELSE 
		RETURN NEW;
	END IF;

END $$ LANGUAGE 'plpgsql';


CREATE TRIGGER salario_validate
BEFORE INSERT ON TRABALHA
FOR EACH ROW 
EXECUTE PROCEDURE verifica_salario();




CREATE OR REPLACE FUNCTION ATUALIZA_LOGIN ()
RETURNS VOID AS $$ 
DECLARE AUX RECORD;
BEGIN

	FOR AUX IN SELECT * FROM CLIENTE
		LOOP
		INSERT INTO LOGIN VALUES (AUX.CPF,'1234');
		END LOOP;
END $$ LANGUAGE 'plpgsql';

select atualiza_login();




CREATE OR REPLACE VIEW PARK 
AS 	SELECT A.NOME,A.H_ABERTURA,A.H_FECHAMENTO,P.FAIXA_ETARIA,P.PRECO
	FROM ATRACAO A,PARQUE P,LOCALIZACAO L
	WHERE A.COD_INTERNO = P.COD_INTERNO AND A.LOCAL_SIGLA LIKE 'ATR%' AND A.LOCAL_SIGLA = L.SIGLA;




CREATE OR REPLACE VIEW LANCHIM 
AS	select a.nome,r.especialidade,r.estrelas
	from atracao a, restaurante r,localizacao l
	where a.cod_interno = r.cod_interno and a.local_sigla = l.sigla;

CREATE OR REPLACE VIEW TICKETS
AS	select c.cod,c.sigla,i.tipo_acesso,t.preco,c.cpf
	from compra c,ingresso i,tipoingresso t
	where c.cod = i.codigo and i.tipo_acesso = t.tipo_acesso
	order by c.sigla asc;



CREATE OR REPLACE FUNCTION atualiza_tickets()
RETURNS TRIGGER AS $$

BEGIN
	CREATE OR REPLACE VIEW TICKETS
	AS	select c.cod,c.sigla,i.tipo_acesso,t.preco,c.cpf
		from compra c,ingresso i,tipoingresso t
		where c.cod = i.codigo and i.tipo_acesso = t.tipo_acesso
		order by c.sigla asc;

RETURN NEW;
END $$ LANGUAGE 'plpgsql';


CREATE TRIGGER trg_compra
AFTER INSERT ON COMPRA
FOR EACH ROW 
EXECUTE PROCEDURE atualiza_tickets();



CREATE VIEW LANCHAO (RESTAURANTE,PRATO,PRECO) 
AS 	select a.nome,p.nome,p.preco
	from prato p,atracao a
	where p.cod_interno = a.cod_interno;


