/* ALUNOS:
	ANTONIO CARLOS NETO
	HIGOR EMANUEL SOUZA SILVA
	MARCELO MENDONCA BORGES */





CREATE OR REPLACE FUNCTION FUNC_DADOS_VENDEDOR
(IN P_CODV VENDEDOR.CODVEND%TYPE,
OUT P_NOME VENDEDOR.NOMEVEND%TYPE)
RETURNS VENDEDOR.NOMEVEND%TYPE AS '
BEGIN
SELECT NOMEVEND
INTO P_NOME
FROM VENDEDOR
WHERE CODVEND = P_CODV;
END' LANGUAGE 'plpgsql';

SELECT FUNC_DADOS_VENDEDOR (240);

SELECT *
FROM VENDEDOR;

-- --------------------------------------------------------------------------------

SELECT NomeCli, CEP
FROM Cliente

CREATE OR REPLACE FUNCTION FUNC_NRO_CLIENTES
(IN P_CEP CLIENTE.CEP%TYPE)
RETURNS NUMERIC AS $$
DECLARE V_CONTA_CEP NUMERIC;
BEGIN
SELECT COUNT(CODCLI)
INTO V_CONTA_CEP
FROM CLIENTE
WHERE CEP = P_CEP;
RETURN V_CONTA_CEP;
END $$ LANGUAGE 'plpgsql';


SELECT FUNC_NRO_CLIENTES('30048400');
-- ------------------------------------------------------------------
SELECT NomeVend, SalFixo
FROM VENDEDOR;

CREATE OR REPLACE FUNCTION FUNC_ATUALIZA_SAL_FIXO 
	(IN PERC FLOAT)
 RETURNS VOID AS $$
 BEGIN

	UPDATE VENDEDOR
	  SET SALFIXO = SALFIXO + (SALFIXO * PERC / 100);

 END $$ LANGUAGE 'plpgsql';

SELECT FUNC_ATUALIZA_SAL_FIXO(100);

SELECT NomeVend, SalFixo
FROM VENDEDOR;
-- -----------------------------------------------------------------

SELECT COUNT(*)
FROM VENDEDOR;

CREATE OR REPLACE FUNCTION
FUNC_CONTA_VENDEDOR (OUT P_QUANT INTEGER)
RETURNS INTEGER AS $$
BEGIN
SELECT COUNT(*) INTO P_QUANT FROM VENDEDOR;
END $$ LANGUAGE 'plpgsql';

SELECT FUNC_CONTA_VENDEDOR();

-- ---------------------------------------------

SELECT *
FROM PRODUTO;

CREATE OR REPLACE FUNCTION FUNC_CADASTRA_PRODUTO
(IN P_COD PRODUTO.CODPROD%TYPE,
IN P_NOME PRODUTO.DESCRI%TYPE,
IN P_UN PRODUTO.UNIDADE%TYPE,
IN P_VALOR PRODUTO.VALUNIT%TYPE)
RETURNS VOID AS $$
DECLARE V_CONT INTEGER;
BEGIN
SELECT COUNT(*)
INTO V_CONT
FROM PRODUTO WHERE DESCRI = P_NOME;
IF V_CONT = 0 THEN
INSERT INTO PRODUTO VALUES (P_COD, P_UN, P_NOME,
P_VALOR);
ELSE
RAISE WARNING 'NOME de Produto Duplicado: %', P_NOME;
END IF;
END $$ LANGUAGE 'plpgsql';

SELECT FUNC_CADASTRA_PRODUTO(777,'OURO','G',7.14);

SELECT FUNC_CADASTRA_PRODUTO(777,'DIAMANTE','G',7.14);

SELECT *
FROM PRODUTO;

-- -------------------------------------------------------------

SELECT * 
FROM PRODUTO;

CREATE OR REPLACE FUNCTION FUNC_CADASTRA_PRODUTO_WHEN
(IN P_COD PRODUTO.CODPROD%TYPE, IN P_NOME PRODUTO.DESCRI%TYPE,
IN P_UN PRODUTO.UNIDADE%TYPE, IN P_VALOR PRODUTO.VALUNIT%TYPE)
RETURNS VOID AS $$
DECLARE V_CONT INTEGER;
BEGIN
SELECT COUNT(*) INTO V_CONT FROM PRODUTO WHERE DESCRI = P_NOME;
CASE
WHEN P_NOME = ' ' OR P_NOME IS NULL THEN
RAISE WARNING 'NOME de Produto não pode ser vazio';
WHEN P_UN = ' ' OR P_UN IS NULL THEN
RAISE WARNING 'Unidade de Medida não pode ser vazio';
WHEN V_CONT = 0 THEN
INSERT INTO PRODUTO VALUES (P_COD, P_UN, P_NOME, P_VALOR);
ELSE
RAISE WARNING 'NOME de Produto Duplicado';
END CASE;
END $$ LANGUAGE 'plpgsql';

SELECT FUNC_CADASTRA_PRODUTO_WHEN(777,NULL,'G',7.14);
SELECT FUNC_CADASTRA_PRODUTO_WHEN(777,'DIAMANTE','G',7.14);
SELECT FUNC_CADASTRA_PRODUTO_WHEN(123,'PILAO',NULL,0.55);
SELECT FUNC_CADASTRA_PRODUTO_WHEN(1222,' ' ,NULL,7.14);
SELECT FUNC_CADASTRA_PRODUTO_WHEN(27,'GOIABADA','KG',1);

SELECT *
FROM PRODUTO;

-- --------------------------------------------------------------

SELECT NomeCli, Cidade
FROM CLIENTE;

CREATE OR REPLACE FUNCTION FUNC_EXIBE_CLIENTE ()
RETURNS void AS $$
/* listar o nome e cidade de clientes no programa
aplicativo */
DECLARE tupla record;
BEGIN
FOR tupla IN SELECT * FROM cliente
LOOP
--processamento sobre o cliente
RAISE NOTICE 'NOME CLIENTE: %, CIDADE: %', tupla.nomecli,
tupla.cidade;
END LOOP;
END $$ LANGUAGE 'plpgsql';

SELECT FUNC_EXIBE_CLIENTE();

-- ------------------------------------------------

SELECT NomeCli, Cidade
FROM CLIENTE;


CREATE OR REPLACE FUNCTION FUNC_EXIBE_CLIENTEx ()
RETURNS SETOF CLIENTE AS $$
DECLARE tupla record;
BEGIN
FOR tupla IN SELECT * FROM cliente
LOOP
--processamento sobre o cliente
RETURN NEXT tupla;
END LOOP;
END $$ LANGUAGE 'plpgsql';

SELECT FUNC_EXIBE_CLIENTEx();

-- -------------------------------------------------------------

-- 2) letra (a)
ALTER TABLE Cliente ADD total_compras integer;

SELECT *
FROM CLIENTE;

CREATE OR REPLACE FUNCTION FUNC_TOTAL()
RETURNS VOID AS $$
DECLARE tupla RECORD;
BEGIN
	FOR tupla IN SELECT * FROM CLIENTE
	
		LOOP
		
		UPDATE CLIENTE
			SET total_compras = (SELECT COUNT(NumPed)
					FROM PEDIDO
					GROUP BY CodCli
					HAVING CodCli = tupla.CodCli)
			WHERE Cliente.CodCli = tupla.CodCli;
			END LOOP;

END $$ language 'plpgsql';

SELECT FUNC_TOTAL();

SELECT *
FROM CLIENTE;

-- -------------------------------------------------------------------------

-- 2) letra (b)


CREATE OR REPLACE FUNCTION VALOR_PEDIDO_TOTAL(IN num_pedido Pedido.NumPed%TYPE)
RETURNS FLOAT8 AS $$
declare aux float8;
	cont record;
BEGIN 
	AUX :=0;
	FOR CONT IN SELECT * FROM ITEMPED I

		LOOP
			IF CONT.numped = num_pedido THEN 
				AUX := AUX + (CONT.QUANT * (SELECT PRODUTO.VALUNIT FROM PRODUTO WHERE CONT.CODPROD = PRODUTO.CODPROD));
				RAISE WARNING 'VALOR PRODUTO %', AUX;
			END IF;
		END LOOP;

return aux;
END$$ LANGUAGE 'plpgsql';

SELECT VALOR_PEDIDO_TOTAL(334);


-- ---------------------------------------------------------------------

--c) Fazer a inserção dos dados em duas ou mais tabelas ao mesmo tempo. Insira alguns dados nessas
-- tabelas através da função criada. Na resposta, mostrar o antes e o depois da chamada da função. 

CREATE OR REPLACE FUNCTION ADICIONA_PEDIDO(IN COD_CLI CLIENTE.CODCLI%TYPE, IN VEND_COD VENDEDOR.CODVEND%TYPE,
						IN PRAZO PEDIDO.PRAZOENTR%TYPE,
						IN PROD_COD1 PRODUTO.CODPROD%TYPE,IN QNT ITEMPED.QUANT%TYPE)
RETURNS VOID AS $$
DECLARE AUX INTEGER;
BEGIN 
	AUX := 0;
	AUX := (SELECT MAX(NUMPED) FROM PEDIDO) + 1;
	
	INSERT INTO PEDIDO VALUES (AUX,PRAZO,COD_CLI,VEND_COD);
	INSERT INTO ITEMPED VALUES (AUX, PROD_COD1, QNT);

END $$ LANGUAGE 'plpgsql';

SELECT ADICIONA_PEDIDO(870,209,30,13,500);

SELECT *
FROM ITEMPED
WHERE NUMPED = (SELECT MAX(NUMPED) FROM PEDIDO);


-- --------------------------------------------------------------------------

-- 2) letra (d)

CREATE OR REPLACE FUNCTION ADICIONA_ITEM_PEDIDO(IN NUM_PED ITEMPED.NUMPED%TYPE, IN PROD_COD ITEMPED.CODPROD%TYPE,IN QNT INTEGER)
RETURNS VOID AS $$

BEGIN 
	
	IF QNT <= 0 THEN 
		RAISE EXCEPTION 'A QUANTIDADE ESTÁ INCORRETA, DEVE SER MAIOR QUE 0';

	ELSE 
		INSERT INTO ITEMPED VALUES (NUM_PED,PROD_COD,QNT);
	END IF;

END $$ LANGUAGE 'plpgsql';

SELECT *
FROM ITEMPED
WHERE NUMPED = 5302;

SELECT ADICIONA_ITEM_PEDIDO(5302,53,-5);

SELECT ADICIONA_ITEM_PEDIDO(5302,53,0);

SELECT ADICIONA_ITEM_PEDIDO(5302,53,100);

SELECT *
FROM ITEMPED
WHERE NUMPED = 5302;

-- ----------------------------------------------------------------------------------